openapi: 3.0.3
info:
  title: CardService API
  description: A Spring Boot application with REST API for storing, requesting and validating debit cards. This application is connected to an Oracle SQL server for storing card data.
  version: '1.0.5'
servers:
  - url: 'http://localhost:7001/cardservice'
    description: Running on a local WebLogic server (using default port)
tags:
  - name: card-rest-controller
    description: REST API for managing debit cards
paths:
  /ecards/:
    post:
      tags:
        - card-rest-controller
      summary: Create new card
      description: Create a new card and save it in the database. This command also automatically generates a hash for the card based on the input data, which can be used for validation later.
      operationId: createCardUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestCardReq'
      responses:
        '200':
          description: OK - This code appears if everything went correctly and the card was created succesfully.
        '500':
          description: Internal server error - This code appears if something went wrong during the card creating process - A deatiled error message can be seen in the message section.
  /ecards/validate:
    post:
      tags:
        - card-rest-controller
      summary: Validate card
      description: This command uses the card data provided in the request body to find a card in the database. If a card is found, a hash will be calculated from the input data which will be compared to the one in the database. This command will return a VALID response if the provided card type AND the calculated hash matches with the one associated with the card in the database, AND if the card is not disabled. If ANY of these requirements are not met, the command will return an INVALID response.
      operationId: validateCardUsingPOST
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestCardVal'
      responses:
        '200':
          description: OK - This code appears if the card was found in the database and the validation process was finished. The result of the validation (VALID/INVALID) can be seen in the response.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '500':
          description: Internal server error - This code appears if the requested card was not found, or if something went wrong during the validation process. - A detailed error message can be seen in the message section.
  '/ecards/{cardNumber}':
    get:
      tags:
        - card-rest-controller
      summary: Request a card by card number
      description: This command performs a search in the database to find a card using the card nubmer given in the input. If found, it returns all available information about the card in response.
      operationId: requestCardUsingGET
      parameters:
        - name: cardNumber
          in: path
          description: The requested card number. Only digits allowed, without separation characters.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK - This code appears if the requested card was found. The response body contains all the information available for that card.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/RestCardRes'
        '404':
          description: Not found - This code appears if a card using the requested card number was not found in the database.
    put:
      tags:
        - card-rest-controller
      summary: Disable a card
      description: This command performs a search in the database to find a card using the card nubmer given in the input. If found, it will mark the card as disabled, which will make any attempt to validate the card (even with correct data) to fail. Once a card is disabled, it CAN NOT be enabled again through the API.
      operationId: disableCardUsingPUT
      parameters:
        - name: cardNumber
          in: path
          description: The number of the card to be disabled. Only digits allowed, without separation characters.
          required: true
          style: simple
          schema:
            type: string
      responses:
        '200':
          description: OK - This code appears if the requested card was found. The response body contains all the information available for that card.
        '404':
          description: Not found - This code appears if a card using the requested card number was not found in the database.
components:
  schemas:
    RestCardReq:
      title: New card input format
      type: object
      properties:
        CVV:
          type: string
          description: CVV code of the card. Digits only.
        cardNumber:
          type: string
          description: Number of the card. Digits only, separation characters are not allowed. Must be a valid MasterCard or VISA card number.
        cardType:
          type: string
          description: Type of the card. Must match with a type available in the database.
        contactInfo:
          type: array
          items:
            $ref: '#/components/schemas/RestContact'
        owner:
          type: string
          description: Name of the card owner. The input data will be converted to uppercase characters.
        validThru:
          type: string
          description: Expiration date of the card, in MM/YY format (must include the / character in the input, e.g. 04/23)
    RestCardRes:
      title: Requested card format
      type: object
      properties:
        cardNumber:
          type: string
          description: Number of the card. Digits only, separation characters are not allowed. Must be a valid MasterCard or VISA card number.
        cardType:
          type: string
          description: Type of the card. Must match with a type available in the database.
        contactInfo:
          type: array
          items:
            $ref: '#/components/schemas/RestContact'
        disabled:
          type: boolean
          description: Returns either if the card is disabled (true) or not (false).
        owner:
          type: string
          description: Name of the card owner. The input data will be converted to uppercase characters.
        validThru:
          type: string
          description: Expiration date of the card, in MM/YY format (must include the / character in the input, e.g. 04/23)
    RestCardVal:
      title: Card data format for validation
      type: object
      properties:
        CVV:
          type: string
          description: CVV code of the card. Digits only.
        cardNumber:
          type: string
          description: Number of the card. Digits only, separation characters are not allowed. Must be a valid MasterCard or VISA card number.
        cardType:
          type: string
          description: Type of the card. Must match with a type available in the database.
        validThru:
          type: string
          description: Expiration date of the card, in MM/YY format (must include the / character in the input, e.g. 04/23)
    RestContact:
      title: Contact list format
      type: object
      properties:
        contact:
          type: string
          description: A phone number (if SMS is provided in type) in international format, or e-mail address (if EMAIL is provided in type)
        type:
          type: string
          description: Type of the contact. Only EMAIL or SMS is accepted.
    ValidationResponse:
      title: Response of card validation
      type: object
      properties:
        result:
          type: string
          description: Name of the card owner. The input data will be converted to uppercase characters.
